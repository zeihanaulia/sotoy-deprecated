<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Sotoy</title>
    <link>https://sotoy.github.io/tags/golang.html</link>
    <description>Recent content in golang on Sotoy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sotoy.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mengenal Context pada Golang</title>
      <link>https://sotoy.github.io/posts/golang/mengenal-context.html</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sotoy.github.io/posts/golang/mengenal-context.html</guid>
      <description>Apa itu Context Golang context adalah standard libray muncul pertama kali pada versi 1.7. Tapi, sebenarnya package ini sudah ada dari dulu, ada di golang.org/x/net/context. Kita dapat menggunakan context untuk melakukan cancelation, timeouts dan passing value ke standard library lainnya. Seperti net, net/http, and os/exec.
Apa sih yang dimaksud dengan cancelation  Analogi dari cancelation kurang lebih seperti ini. Misalnya, Andi meminta dibuatkan Bakso kepada Budi untuk acaranya. Budi segera mencari daging di pasar dan meminta tolong Cici untuk membeli perlatan makan plastik.</description>
    </item>
    
    <item>
      <title>Migrasi database dengan golang</title>
      <link>https://sotoy.github.io/posts/golang/migrasi-database.html</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sotoy.github.io/posts/golang/migrasi-database.html</guid>
      <description>Akhir akhir ini terasa capek ketika membuat schema database langsung menggunakan GUI. Dan schema yang berubah bisa kadang kehilangan sejarahnya, kapan perubahannya tidak terawasi. Bagaimana jika skema database disatukan dengan source code aplikasi kita. Sehingga perkembangan skema database dapat tercatat sama seperti code.
Dengan tools bernama migrate menjadi solusi untuk permasalahan diatas. alih alih kita langsung membuat tabel diGUI database, kita bikin dalam script yang nantinya dimasukan kedalam database juga.</description>
    </item>
    
    <item>
      <title>Membuat Aplikasi Pencatatan Keuangan dengan Golang dan GraphQL</title>
      <link>https://sotoy.github.io/posts/graphql/graphql-multiple-result-for-error-handling.html</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sotoy.github.io/posts/graphql/graphql-multiple-result-for-error-handling.html</guid>
      <description>GraphQL di tahun 2020 sudah menjadi normal baru didunia pengembangan perangkat lunak. Alat-alat atau pustaka untuk membangun GraphQL server sudah banyak sekali ada dibermacam-macam bahasa pemrogaman juga. Di tutorial kali ini, saya akan coba untuk membangun aplikasi menggunakan GraphQL sebagai penyedia datanya. Aplikasi yang akan dibangun adalah aplikasi pencatatan keuangan pribadi.
Gqlgen Gqlgen adalah salah satu pustaka yang dapat membantu kita membangun GraphQL Server.
Memperpersiapkan Proyek $ mkdir cawang $ cd cawang $ go mod init github.</description>
    </item>
    
  </channel>
</rss>